{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Business Solutions","text":"<ul> <li> <p> PerfectWORK ERP</p> <p>A modular and versatile management solutions for your business</p> <p> Learn More</p> </li> <li> <p> Industrial Solutions</p> <p>A modular and versatile management solutions for your business</p> <p> Getting started</p> </li> <li> <p> Infrastructure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Explore</p> </li> <li> <p> Developer</p> <p>Documentation for Developer [GitHub]</p> <p> Development</p> </li> </ul>"},{"location":"10_perfectwork/","title":"PerfectWork ERP","text":"<p>The PerfectWork ERP software - an easiest path to professional, ready-to-use, interconnected  business applications., which is based on Popular Odoo ERP Framework with more than 12 millions users,  With this versatile framework, PerfectWork ERP is Odoo enriched and ready to use for your organization. An adaptation of the Odoo framework, which is benefited from more than 15 years of development and use in thousands of companies, it is a robust and efficient management software. It was created to enable this software to be adapted to Singapore, Malaysia and ASEAN standards and to accelerate its development in Asia.</p> <p></p> <ul> <li> <p> ERP Core Platform</p> <p>PerfectWork is a comprehensive business management software that offering varying capabilities.</p> <p> Explore </p> </li> <li> <p> Accounting &amp; Finance</p> <p>Invoicing is a standalone app for creating and sending invoices, while Accounting is a comprehensive accounting application.</p> <p> Finance </p> </li> <li> <p> Sales &amp; Distribution</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Explore</p> </li> <li> <p> CRM &amp; Marketing</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> <li> <p> Website &amp; eCommerce</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> <li> <p> Manufacturing</p> <p>PerfectWork efficiently manages manufacturing orders, bills of materials, work centers, and tracks all manufacturing operations at every level.</p> <p> Explore</p> </li> <li> <p> Supply Chain &amp; Logistics</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> <li> <p> Human Resources</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> <li> <p> Customer Services</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> <li> <p> Retail Operations</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> <li> <p> Office Operations</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> Explore</p> </li> </ul>"},{"location":"10_perfectwork/01_platform/","title":"ERP Core Platform","text":"<p>PerfectWork ERP is Odoo enriched platform and ready to use for your organization. Discover the power of seamless operations with our Odoo-based ERP solution. PerfectWork ERP is a very feature-filled business application framework, with literally hundreds of applications and modules available. When you first access your PerfectWork Business Platform instance, the only functionality you will have is a limited messaging options between users. From there, PerfectWork ERP allows you to install the applications you need, as you need them. This flexibility makes PerfectWork ERP much more accessible than many business software solutions.</p> <p> With its user-friendly interface, you'll wonder how you ever managed without it. PerfectWork ERP simplifies complex operations, making day-to-day tasks a breeze for your team. Ready to perfect your workflow? Choose PerfectWork ERP \u2013 where efficiency meets innovation. Experience the transformation of your business processes and take your organization to new heights of productivity and success.The unique tool for the complete management of your organization</p> <p></p> <ul> <li> <p> Setting Up Database</p> <p>PerfectWork Cloud Services offers private, fully-managed cloud databases for testing and production use, accessible via web browser. </p> <p> Sign Up Online</p> </li> <li> <p> Applications and Modules</p> <p>Applications are self-contained packages that offer specific functionalities like CRM, Inventory, Accounting or others.</p> <p> Installing Applications </p> </li> <li> <p> Users and Groups</p> <p>Users and Groups</p> <p>  Users Management </p> </li> <li> <p> Companies</p> <p>Setting Up Companies</p> <p>  Setting Up Companies </p> </li> <li> <p> Integrations</p> <p>Integrations with other systems</p> <p>  Integrations </p> </li> <li> <p> Devices (IoT)</p> <p>Devices (IoT)</p> <p>  Devices (IoT) </p> </li> <li> <p> Documentation @ Odoo</p> <p>Odoo provides comprehensive documentation, but some features are exclusive to the Enterprise version.</p> <p> Documentation </p> </li> </ul>"},{"location":"10_perfectwork/20_accounting/","title":"Accounting & Finance","text":"Our documentation will help you understand how to manage your books, what the accounting implications are for certain actions within Odoo and other Accounting tips, tricks, and Good to Knows that will help you use the Accounting application and make sense of it all.   <ul> <li> <p> Payment</p> <p>PerfectWork offers customizable invoicing and payment options to suit various business needs, ensuring efficient and accurate processing.</p> <p> Payment </p> </li> <li> <p> Year End Closing</p> <p>Year-end closing is vital for maintaining financial accuracy, complying with regulations and ensuring transparency in reporting.</p> <p> Year End </p> </li> <li> <p> Localization</p> <p>Countries Localization</p> <p>   Localization </p> </li> </ul>"},{"location":"10_perfectwork/20_accounting/30_payment/","title":"Payment","text":"<ul> <li> <p> Payment Documentation @ Odoo</p> <p>Refer to Odoo documentation for Payment related information.</p> <p> Getting Started </p> </li> <li> <p> Partner Statement</p> <p>PerfectWork offers customizable customer and vendor statements</p> <p> Statement </p> </li> </ul>"},{"location":"10_perfectwork/20_accounting/30_payment/partner_statement/","title":"Partner Statement","text":"<p>This module extends the functionality of Invoicing to support the printing of customer and vendor statements. There are three types of statements: Activity, Detailed Activity, and Outstanding. Aging details can be shown in the reports, expressed in aging buckets, so the customer or vendor can review how much is open, due or overdue.</p> <p> The activity statement provides details of all activity on the partner receivables or payables between two selected dates. This includes all invoices, refunds and payments. Any outstanding balance dated prior to the chosen statement period will appear as a forward balance at the top of the statement. The list is displayed in chronological order and is split by currencies.</p> <p> The detailed activity statement is an extension of the previous statement, and intends to explain the transactions that have happened during the period, also providing with a Prior Balance section and an Ending Balance section.</p> <p> The outstanding statement provides details of all outstanding partner receivables or payables up to a particular date. This includes all unpaid invoices, unclaimed refunds and outstanding payments. The list is displayed in chronological order and is split by currencies.</p>"},{"location":"10_perfectwork/20_accounting/30_payment/partner_statement/#configuration","title":"Configuration","text":"<p>Users willing to access to this report should have proper Accounting &amp; Finance rights:</p> <ol> <li>Go to Settings / Users and edit your user to add the corresponding access rights as follows.</li> <li>In Application / Accounting &amp; Finance, select Billing or Billing Manager</li> </ol> <p>To configure this module, you need to:</p> <ol> <li>Go to Invoicing / Configuration / Settings</li> <li>Under the Partner Statements of Accounting option select either or both of OCA Activity or Outstanding Statement</li> <li>Once selected, you may set default options for the reports.</li> <li>Click Save</li> </ol> <p>Removing the wizard from menus follows the same process.</p>"},{"location":"10_perfectwork/20_accounting/30_payment/partner_statement/#usage","title":"Usage","text":"<p>To use this module, you need to:</p> <ol> <li>Go to a list of Partners, Contacts, Customer or Vendors and select one or more.</li> <li>Press 'Action &gt; Partner Activity Statement' or 'Action &gt; Partner Outstanding Statement' respectively.</li> <li>Indicate if you want to display receivables or payables, and if you want to display aging buckets and the aging type.</li> <li>Optionally complete advanced options such as filtering non due or negative balance partners.</li> </ol>"},{"location":"10_perfectwork/20_accounting/30_payment/partner_statement/#customization","title":"Customization","text":""},{"location":"10_perfectwork/20_accounting/90_year_end_closing/","title":"Year End Closing","text":""},{"location":"10_perfectwork/20_accounting/90_year_end_closing/#fiscal-years","title":"Fiscal years","text":"<p>By default, the fiscal year is set to last 12 months and end on December 31<sup>st</sup>. However, its duration and end date can vary due to cultural, administrative, and economic considerations.</p> <p> To modify these values, go to Accounting \u2023 Configuration \u2023 Settings. Under the Fiscal Periods section, change the Last Day field if necessary.</p> <p> If the period lasts more than or less than 12 months, enable Fiscal Years and Save. Go back to the Fiscal Periods section and click \u279c Fiscal Years. From there, click Create, give it a Name, and both a Start Date and End Date.</p> <p>Note</p> <p>Once the set fiscal period is over, Odoo automatically reverts to the default periodicity, taking into account the value specified in the Last Day field.</p>"},{"location":"10_perfectwork/20_accounting/90_year_end_closing/#year-end-checklist","title":"Year-end checklist","text":""},{"location":"10_perfectwork/20_accounting/90_year_end_closing/#before-closure","title":"Before closure","text":"<p>Before closing a fiscal year, ensure first everything is accurate and up-to-date:</p> <ul> <li> <p>Make sure all bank accounts are fully reconciled up to year-end, and confirm that the ending book balances match the bank statement balances.</p> </li> <li> <p>Verify that all customer invoices have been entered and approved and that there are no draft invoices.</p> </li> <li> <p>Confirm that all vendor bills have been entered and agreed upon.</p> </li> <li> <p>Validate all expenses, ensuring their accuracy.</p> </li> <li> <p>Corroborate that all received payments have been encoded and recorded accurately.</p> </li> <li> <p>Close all suspense accounts.</p> </li> <li> <p>Book all depreciation and deferred revenue entries.</p> </li> </ul>"},{"location":"10_perfectwork/20_accounting/90_year_end_closing/#closing-a-fiscal-year","title":"Closing a fiscal year","text":"<p>Then, to close the fiscal year:</p> <ul> <li> <p>Run a tax report, and verify that all tax information is correct.</p> </li> <li> <p>Reconcile all accounts on the balance sheet:</p> <ul> <li> <p>Update the bank balances in Odoo according to the actual balances found on the bank statements.</p> </li> <li> <p>Reconcile all transactions in the cash and bank accounts by running the aged receivables and aged payables reports.</p> </li> <li> <p>Audit all accounts, being sure to fully understand all transactions and their nature, making sure to include loans and fixed assets.</p> </li> <li> <p>Optionally, run payments matching to validate any open vendor bills and customer invoices with their payments. While this step is optional, it could assist the year-end closing process if all outstanding payments and invoices are reconciled, potentially finding errors or mistakes in the system.</p> </li> </ul> </li> </ul> <p>Next, the accountant likely verifies balance sheet items and book entries for:</p> <ul> <li>year-end manual adjustments,</li> <li>work in progress,</li> <li>depreciation journal entries,    </li> <li>loans,    </li> <li>tax adjustments,    </li> <li>etc.    </li> </ul> <p>If the accountant is going through the year-end audit, they may want to have paper copies of all balance sheet items (such as loans, bank accounts, prepayments, sales tax statements, etc.) to compare these with the balances in Odoo.</p> <p>Tip</p> <p>During this process, it is good practice to set a Journal Entries Lock Date to the last day (inclusive) of the preceding fiscal year by going to Accounting \u2023 Accounting \u2023 Lock Dates. This way, the accountant can be confident that nobody changes the transactions while auditing the books. Users from the accountant access group can still create and modify entries.</p>"},{"location":"10_perfectwork/20_accounting/90_year_end_closing/#current-years-earnings","title":"Current year\u2019s earnings","text":"<p>Odoo uses a unique account type called current year\u2019s earnings to display the amount difference between the income and expenses accounts.</p> <p>Note</p> <p>The chart of accounts can only contain one account of this type. By default, it is a 999999 account named Undistributed Profits/Losses.</p> <p>To allocate the current year\u2019s earnings, create a miscellaneous entry to book them to any equity account. Once done, confirm whether or not the current year\u2019s earnings in the balance sheet is correctly reporting a balance of zero. If that is the case, set an All Users Lock Date to the last day of the fiscal year by going to Accounting \u2023 Accounting \u2023 Lock Dates.</p> <p>Tip</p> <p>Install the Irreversible Lock Date (<code>account_lock</code>) module to make the All Users Lock Date irreversible once set.</p> <p>Note</p> <p>A specific year-end closing entry is optional in order to close out the profit and loss statement. The reports are created in real-time, meaning that the profit and loss statement corresponds directly with the year-end date specified in Odoo. Therefore, any time the income statement is generated, the beginning date corresponds with the beginning of the fiscal year and all account balances should equal zero.</p>"},{"location":"10_perfectwork/40_crm_marketing/","title":"CRM and Marketing","text":"SYNER-CATALYST ERP system offers Customer Relationship Management software for the effective management of customers and the establishment of new business relationships. The CRM module permits you to monitor and operate all new leads and opportunities in one place. Having an adequate platform for the administration of leads, opportunities, and related operations will benefit a company in many ways.    The business world around us is growing rapidly, and in order to cope with this growth, you must be ahead with customer management. Every year, SYNER-CATALYST introduces its new version with a wide variety of new features that help a company improve its performance at multiple levels. SYNER-CATALYST 6.0, the latest version of the SYNER-CATALYST ERP system includes advanced tools to enhance the working efficiency of the CRM module.   The salesperson will get easy access to the sales pipeline which encompasses all information in one place. The well-visualized information available in the sales pipeline can be utilized to monitor CRM operations effectively. Data available in this pipeline will be segmented based on the progress in operations.    Suitable stages can be assigned for leads and opportunities according to the progression. Improved visualization is one of the attractive features of the latest version of SYNER-CATALYST CRM. Additional new features will be discussed while detailing the functionalities of the CRM module.   Customer Relationship Management EMail Marketing SMS Marketing Social Media Events Management Customer Survey"},{"location":"10_perfectwork/50_website/","title":"Website & eCommerce","text":"PerfectWORK, a comprehensive suite of business tools, offers an advanced website builder with a distinct interface and foundation. This multifunctional, open-source module provides insights into managing online stores and websites. Real-time integration links the platform to other modules, making it easy to manage tasks and necessities. Its multipurpose characteristics make it suitable for various purposes, including website building, eCommerce sites, customer portals, job portals, and HR recruitment portals.    Businesses can easily develop and modify websites using PerfectWORK. The platform is designed to build, administer, and design websites according to company needs and standards. It offers usability from both the front and back ends, with modifications instantly recognized by each other.    Online and eCommerce platforms have become popular for conducting business and shopping. PerfectWORK\u2019s eCommerce module enables businesses to handle online sales processes more effectively compared to traditional business operations. When seeking a reliable website and eCommerce system, businesspeople strongly recommend PerfectWORK. This chapter will delve into every aspect of the Odoo 17 eCommerce module and website.   <ul> <li> <p> Settings</p> <p>Explore the choices in the PerfectWORK Website module\u2019s Settings pane. Each option is explained in a separate section.\u00a0</p> <p> Settings </p> </li> <li> <p> Configuration</p> <p>Enhance website functionality by configuring it with advanced features in the developer mode. </p> <p> Configuration </p> </li> </ul>"},{"location":"10_perfectwork/50_website/50_10_settings/","title":"Website & eCommerce -> Settings","text":"<p>PerfectWORK\u2019s Website module\u2019s Settings page offers various advanced features accessible through each module. These tools are clearly defined in a Settings window, providing options to activate based on business policies. By checking this window and enabling these features, you can transform your website into a full-fledged application, enhancing functionality and productivity.</p>"},{"location":"10_perfectwork/50_website/50_20_configuration/","title":"Website & eCommerce -> Configuration","text":""},{"location":"10_perfectwork/50_website/50_20_configuration/#setting-default-website","title":"Setting Default Website","text":"<p>Enable Debug Mode: Go to Settings &gt; Technical &gt; Settings and enable \"Debug Mode.\"</p> <ol> <li>Find default_website: Go to Settings &gt; Technical &gt; External IDs and search for default_website </li> <li>Change External ID: Replace the existing external ID with the external ID of the website you want to set as default.</li> </ol> <p>Important Notes:</p> <p>Multiple Websites: If you have multiple websites, ensure they are properly configured and have distinct domains or subdomains.  Website Switcher: Odoo usually provides a website switcher in the user interface, allowing users to easily switch between websites. \u00a0 </p>"},{"location":"10_perfectwork/60_inventory_manufacturing/","title":"Inventory","text":"Inventory management is one of the crucial aspects of business operations that needs to be monitored with utmost attention and accuracy. Even a simple error in the movement of inventory has the potential to harm your business and that\u2019s why entrepreneurs always prioritize effective inventory management.   As the company expands, the need for a dedicated inventory management system also grows. Here comes the SYNER-CATALYST Inventory management system for your help with advanced strategic plans that optimizes the operations of organizing, monitoring, and managing inventory in real-time. SYNER-CATALYST ensures accurate inventory tracking that helps your business to handle orders as early as possible.  <ul> <li> <p> Documentation @ Odoo</p> <p>Odoo provides comprehensive documentation, but some features are exclusive to the Enterprise version.</p> <p> Read More </p> </li> </ul> <p></p>"},{"location":"10_perfectwork/60_inventory_manufacturing/#manufacturing","title":"Manufacturing","text":"<p>A manufacturing corporation must coordinate an unending amount of work, from putting together the components for manufacturing to shipping the finished product to the market. To ensure the quality of each product, the conversion of raw materials into final goods must be effectively monitored or managed. If all of these processes are managed manually, it will be quite taxing on you and take up a significant portion of your working day. In order to ensure that their consumers are receiving high-quality products, the company will benefit from having an effective system for managing all of these procedures related to manufacturing orders.</p> <p> A business may effectively manage manufacturing orders, bills of materials, and work centers, and track all manufacturing operations at every level with the use of the Odoo system. Odoo is wholly reliable for the efficient management of job orders. With the specialized module, arranging and planning each stage of manufacture is now simpler.</p> <ul> <li> <p> Documentation @ Odoo</p> <p>Odoo provides comprehensive documentation, but some features are exclusive to the Enterprise version.</p> <p> Read More </p> </li> </ul>"},{"location":"10_perfectwork/70_supply_chain/","title":"Supply Chain and Logistics","text":"Getting Started Fleet Tracking"},{"location":"10_perfectwork/80_human_resources/","title":"Human Resources","text":"Getting Started Recruitment Employee Management Attendance Leave Expenses Payroll Skill Management In-Country Localization"},{"location":"10_perfectwork/85_customer_services/","title":"Customer Services","text":"Getting Started Appointments Project Management Timesheet Help Desk Field Services"},{"location":"10_perfectwork/88_retail_store/","title":"Retail Store","text":"Getting Started Shop Features Payment Terminal"},{"location":"20_solutions/","title":"Infrastructure","text":"<ul> <li> <p> OpenUpgrade Database</p> </li> <li> <p></p> <p> OpenUpgrade Database</p> </li> <li> <p></p> <p> OpenUpgrade Database</p> </li> </ul>"},{"location":"20_solutions/60_open_upgrade/","title":"Upgrading SYNER-CATALYST","text":"<p>We eneed to use both Odoo OCA library for SYNER-CATALYST database migration:</p> <ul> <li> <p>https://github.com/OCA/OpenUpgrade</p> </li> <li> <p>https://github.com/OCA/openupgradelib</p> </li> </ul> <p>The branches in the first project contain the framework, as well as the database analysis and the migration scripts. </p> <p>The second project contains a library with helper functions. It can be used in the migration of any SYNER-CATALYST module.</p>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/","title":"Running Migration","text":"<p>Check out the code manually and upgrade your database by calling odoo-bin, (or openerp-server) directly. You will want to do this when you are working on developing migration scripts for uncovered modules.</p>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#get-the-code-from-openupgrade-and-dependencies","title":"Get the code from OpenUpgrade and dependencies","text":""},{"location":"20_solutions/60_open_upgrade/10_running_migration/#openupgrade","title":"OpenUpgrade","text":"<p>Make the openupgrade_framework and the openupgrade_scripts modules available in the addons path in the SYNER-CATALYST instance of the new version. </p>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#openupgradelib","title":"openupgradelib","text":"<ul> <li> <p>When installing the openupgradelib make sure you check out the latest version from github to get the latest updates and fixes:</p> Install latest version of openupgradelib<pre><code>pip install git+https://github.com/OCA/openupgradelib.git@master#egg=openupgradelib\n</code></pre> </li> </ul>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#check-coverage-of-the-migration-scripts-for-your-installed-modules","title":"Check coverage of the migration scripts for your installed modules","text":"<p>Check if there are migration scripts provided for the set of modules that are installed in your Odoo database. If there are modules for which no migration scripts have been developed yet, your migration may fail or the integrity of your database may be lacking.  </p> <p>Check the module coverage in this documentation under Module coverage and refer to the Migration script development documentation to add the missing migration scripts.</p>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#make-a-copy-of-the-database-to-migrate","title":"Make a copy of the database to migrate","text":"<p>Decide which database you are going to upgrade. You absolutely must make a backup of your live database before you start this process!</p>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#adjust-the-configuration-for-syner-catalyst-and-openupgrade","title":"Adjust the configuration for SYNER-CATALYST and OpenUpgrade","text":"<p>Edit the configuration files and command line parameters to point to the database you are going to upgrade. The recommended command line parameters are </p> <pre><code>--upgrade-path=&lt;path_to_openupgrade&gt;/openupgrade_scripts/scripts --update all --stop-after-init --load=base,web,openupgrade_framework\n</code></pre>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#configuration-options","title":"Configuration options","text":"<ul> <li> <p>When migrating across several versions of Odoo, setting the target version as an environment variable allows OpenUpgrade to skip methods that are called in every version but really only need to run in the target version.</p> </li> <li> <p>Make the target version available to OpenUpgrade with:</p> <pre><code>export OPENUPGRADE_TARGET_VERSION=16.0\n</code></pre> <p>(when migrating up to 16.0)</p> </li> </ul>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#obsolete-options-in-the-odoo-configuration-file","title":"Obsolete options in the Odoo configuration file","text":"<p>Add these options to a separate stanza in the server configuration file under a header [openupgrade]</p> <ul> <li> <p>autoinstall - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value (and their dependencies) are selected for installation as well.</p> </li> <li> <p>force_deps - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value will be treated as a module dependency. With this directive, you can manipulate the order in which the modules are migrated. If the modules from the value are not already installed on your database, they will be selected for installation (as will their dependencies). Be careful not to introduce a circular dependency using this directive.</p> </li> </ul>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#run-the-upgrade-fix-data-and-repeat","title":"Run the upgrade, fix data and repeat\u2026","text":"<p>Run the upgrade and check for errors. You will probably learn a lot about your data and have to do some manual clean up before and after the upgrade. Expect to repeat the process several times as you encounter errors, clean up your data, and try again. If necessary, ask for help or report bugs on Github.</p>"},{"location":"20_solutions/60_open_upgrade/10_running_migration/#write-the-missing-migration-scripts","title":"Write the missing migration scripts","text":"<p>At this stage, if some of your modules don\u2019t have yet migration scripts, you might need to add them yourself. Read more about the development of migrations scripts in Migration script development</p>"},{"location":"20_solutions/60_open_upgrade/90_after_migration/","title":"After Migration","text":"<p>OpenUpgrade keeps old model tables and old columns (prefixed with openupgrade_legacy_ word) in PostgreSQL as a conservative strategy because they can be used in a later migration script (or to fix an incorrect migration) or only for reference. </p> <p>After the upgraded database has been running stable for a while, you can consider removing the obsolete tables and columns to keep your database clean and tidy (i.e. to restore the consistency between the ORM and the database layout). The data is orphaned, which means there is no protection from the ORM when another module or a future version of Odoo reintroduces any table or column (for a new purpose) that happens to still exist in your database. </p> <p>There\u2019s a module called _database_cleanup_, hosted on OCA server-tools project (https://github.com/OCA/server-tools), that allows to purge this old data in an intuitive way. </p> <p>You are also encouraged to have Postgresql run a full vacuum to free up disk space (see the documentation of your version of Postgresql).</p>"},{"location":"20_solutions/90_clinic_management/","title":"Clinic Management","text":"Getting Started Patients Appointments"},{"location":"20_solutions/99_mentoring/","title":"Mentoring & Couching","text":"Getting Started Membership Mentor - Mentee Management"},{"location":"30_infrastructure/","title":"Developer CookBook","text":"<ul> <li> <p> OpenUpgrade Database</p> </li> <li> <p></p> <p> OpenUpgrade Database</p> </li> </ul>"},{"location":"30_infrastructure/60_open_upgrade/","title":"Upgrading SYNER-CATALYST","text":"<p>We eneed to use both Odoo OCA library for SYNER-CATALYST database migration:</p> <ul> <li> <p>https://github.com/OCA/OpenUpgrade</p> </li> <li> <p>https://github.com/OCA/openupgradelib</p> </li> </ul> <p>The branches in the first project contain the framework, as well as the database analysis and the migration scripts. </p> <p>The second project contains a library with helper functions. It can be used in the migration of any SYNER-CATALYST module.</p>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/","title":"Running Migration","text":"<p>Check out the code manually and upgrade your database by calling odoo-bin, (or openerp-server) directly. You will want to do this when you are working on developing migration scripts for uncovered modules.</p>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#get-the-code-from-openupgrade-and-dependencies","title":"Get the code from OpenUpgrade and dependencies","text":""},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#openupgrade","title":"OpenUpgrade","text":"<p>Make the openupgrade_framework and the openupgrade_scripts modules available in the addons path in the SYNER-CATALYST instance of the new version. </p>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#openupgradelib","title":"openupgradelib","text":"<ul> <li> <p>When installing the openupgradelib make sure you check out the latest version from github to get the latest updates and fixes:</p> Install latest version of openupgradelib<pre><code>pip install git+https://github.com/OCA/openupgradelib.git@master#egg=openupgradelib\n</code></pre> </li> </ul>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#check-coverage-of-the-migration-scripts-for-your-installed-modules","title":"Check coverage of the migration scripts for your installed modules","text":"<p>Check if there are migration scripts provided for the set of modules that are installed in your Odoo database. If there are modules for which no migration scripts have been developed yet, your migration may fail or the integrity of your database may be lacking.  </p> <p>Check the module coverage in this documentation under Module coverage and refer to the Migration script development documentation to add the missing migration scripts.</p>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#make-a-copy-of-the-database-to-migrate","title":"Make a copy of the database to migrate","text":"<p>Decide which database you are going to upgrade. You absolutely must make a backup of your live database before you start this process!</p>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#adjust-the-configuration-for-syner-catalyst-and-openupgrade","title":"Adjust the configuration for SYNER-CATALYST and OpenUpgrade","text":"<p>Edit the configuration files and command line parameters to point to the database you are going to upgrade. The recommended command line parameters are </p> <pre><code>--upgrade-path=&lt;path_to_openupgrade&gt;/openupgrade_scripts/scripts --update all --stop-after-init --load=base,web,openupgrade_framework\n</code></pre>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#configuration-options","title":"Configuration options","text":"<ul> <li> <p>When migrating across several versions of Odoo, setting the target version as an environment variable allows OpenUpgrade to skip methods that are called in every version but really only need to run in the target version.</p> </li> <li> <p>Make the target version available to OpenUpgrade with:</p> <pre><code>export OPENUPGRADE_TARGET_VERSION=16.0\n</code></pre> <p>(when migrating up to 16.0)</p> </li> </ul>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#obsolete-options-in-the-odoo-configuration-file","title":"Obsolete options in the Odoo configuration file","text":"<p>Add these options to a separate stanza in the server configuration file under a header [openupgrade]</p> <ul> <li> <p>autoinstall - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value (and their dependencies) are selected for installation as well.</p> </li> <li> <p>force_deps - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value will be treated as a module dependency. With this directive, you can manipulate the order in which the modules are migrated. If the modules from the value are not already installed on your database, they will be selected for installation (as will their dependencies). Be careful not to introduce a circular dependency using this directive.</p> </li> </ul>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#run-the-upgrade-fix-data-and-repeat","title":"Run the upgrade, fix data and repeat\u2026","text":"<p>Run the upgrade and check for errors. You will probably learn a lot about your data and have to do some manual clean up before and after the upgrade. Expect to repeat the process several times as you encounter errors, clean up your data, and try again. If necessary, ask for help or report bugs on Github.</p>"},{"location":"30_infrastructure/60_open_upgrade/10_running_migration/#write-the-missing-migration-scripts","title":"Write the missing migration scripts","text":"<p>At this stage, if some of your modules don\u2019t have yet migration scripts, you might need to add them yourself. Read more about the development of migrations scripts in Migration script development</p>"},{"location":"30_infrastructure/60_open_upgrade/90_after_migration/","title":"After Migration","text":"<p>OpenUpgrade keeps old model tables and old columns (prefixed with openupgrade_legacy_ word) in PostgreSQL as a conservative strategy because they can be used in a later migration script (or to fix an incorrect migration) or only for reference. </p> <p>After the upgraded database has been running stable for a while, you can consider removing the obsolete tables and columns to keep your database clean and tidy (i.e. to restore the consistency between the ORM and the database layout). The data is orphaned, which means there is no protection from the ORM when another module or a future version of Odoo reintroduces any table or column (for a new purpose) that happens to still exist in your database. </p> <p>There\u2019s a module called _database_cleanup_, hosted on OCA server-tools project (https://github.com/OCA/server-tools), that allows to purge this old data in an intuitive way. </p> <p>You are also encouraged to have Postgresql run a full vacuum to free up disk space (see the documentation of your version of Postgresql).</p>"},{"location":"50_developer/","title":"Developer CookBook","text":"<ul> <li> <p> OpenUpgrade Database</p> </li> <li> <p></p> <p> OpenUpgrade Database</p> </li> </ul>"},{"location":"50_developer/60_open_upgrade/","title":"Upgrading SYNER-CATALYST","text":"<p>We eneed to use both Odoo OCA library for SYNER-CATALYST database migration:</p> <ul> <li> <p>https://github.com/OCA/OpenUpgrade</p> </li> <li> <p>https://github.com/OCA/openupgradelib</p> </li> </ul> <p>The branches in the first project contain the framework, as well as the database analysis and the migration scripts. </p> <p>The second project contains a library with helper functions. It can be used in the migration of any SYNER-CATALYST module.</p>"},{"location":"50_developer/60_open_upgrade/10_running_migration/","title":"Running Migration","text":"<p>Check out the code manually and upgrade your database by calling odoo-bin, (or openerp-server) directly. You will want to do this when you are working on developing migration scripts for uncovered modules.</p>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#get-the-code-from-openupgrade-and-dependencies","title":"Get the code from OpenUpgrade and dependencies","text":""},{"location":"50_developer/60_open_upgrade/10_running_migration/#openupgrade","title":"OpenUpgrade","text":"<p>Make the openupgrade_framework and the openupgrade_scripts modules available in the addons path in the SYNER-CATALYST instance of the new version. </p>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#openupgradelib","title":"openupgradelib","text":"<ul> <li> <p>When installing the openupgradelib make sure you check out the latest version from github to get the latest updates and fixes:</p> Install latest version of openupgradelib<pre><code>pip install git+https://github.com/OCA/openupgradelib.git@master#egg=openupgradelib\n</code></pre> </li> </ul>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#check-coverage-of-the-migration-scripts-for-your-installed-modules","title":"Check coverage of the migration scripts for your installed modules","text":"<p>Check if there are migration scripts provided for the set of modules that are installed in your Odoo database. If there are modules for which no migration scripts have been developed yet, your migration may fail or the integrity of your database may be lacking.  </p> <p>Check the module coverage in this documentation under Module coverage and refer to the Migration script development documentation to add the missing migration scripts.</p>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#make-a-copy-of-the-database-to-migrate","title":"Make a copy of the database to migrate","text":"<p>Decide which database you are going to upgrade. You absolutely must make a backup of your live database before you start this process!</p>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#adjust-the-configuration-for-syner-catalyst-and-openupgrade","title":"Adjust the configuration for SYNER-CATALYST and OpenUpgrade","text":"<p>Edit the configuration files and command line parameters to point to the database you are going to upgrade. The recommended command line parameters are </p> <pre><code>--upgrade-path=&lt;path_to_openupgrade&gt;/openupgrade_scripts/scripts --update all --stop-after-init --load=base,web,openupgrade_framework\n</code></pre>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#configuration-options","title":"Configuration options","text":"<ul> <li> <p>When migrating across several versions of Odoo, setting the target version as an environment variable allows OpenUpgrade to skip methods that are called in every version but really only need to run in the target version.</p> </li> <li> <p>Make the target version available to OpenUpgrade with:</p> <pre><code>export OPENUPGRADE_TARGET_VERSION=16.0\n</code></pre> <p>(when migrating up to 16.0)</p> </li> </ul>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#obsolete-options-in-the-odoo-configuration-file","title":"Obsolete options in the Odoo configuration file","text":"<p>Add these options to a separate stanza in the server configuration file under a header [openupgrade]</p> <ul> <li> <p>autoinstall - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value (and their dependencies) are selected for installation as well.</p> </li> <li> <p>force_deps - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value will be treated as a module dependency. With this directive, you can manipulate the order in which the modules are migrated. If the modules from the value are not already installed on your database, they will be selected for installation (as will their dependencies). Be careful not to introduce a circular dependency using this directive.</p> </li> </ul>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#run-the-upgrade-fix-data-and-repeat","title":"Run the upgrade, fix data and repeat\u2026","text":"<p>Run the upgrade and check for errors. You will probably learn a lot about your data and have to do some manual clean up before and after the upgrade. Expect to repeat the process several times as you encounter errors, clean up your data, and try again. If necessary, ask for help or report bugs on Github.</p>"},{"location":"50_developer/60_open_upgrade/10_running_migration/#write-the-missing-migration-scripts","title":"Write the missing migration scripts","text":"<p>At this stage, if some of your modules don\u2019t have yet migration scripts, you might need to add them yourself. Read more about the development of migrations scripts in Migration script development</p>"},{"location":"50_developer/60_open_upgrade/90_after_migration/","title":"After Migration","text":"<p>OpenUpgrade keeps old model tables and old columns (prefixed with openupgrade_legacy_ word) in PostgreSQL as a conservative strategy because they can be used in a later migration script (or to fix an incorrect migration) or only for reference. </p> <p>After the upgraded database has been running stable for a while, you can consider removing the obsolete tables and columns to keep your database clean and tidy (i.e. to restore the consistency between the ORM and the database layout). The data is orphaned, which means there is no protection from the ORM when another module or a future version of Odoo reintroduces any table or column (for a new purpose) that happens to still exist in your database. </p> <p>There\u2019s a module called _database_cleanup_, hosted on OCA server-tools project (https://github.com/OCA/server-tools), that allows to purge this old data in an intuitive way. </p> <p>You are also encouraged to have Postgresql run a full vacuum to free up disk space (see the documentation of your version of Postgresql).</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"internal/","title":"Internal Use Only Guide","text":"Internal User Only Guide Backend View Migration Guide API Integration Guide"},{"location":"internal/09_backend_view/","title":"Backend View","text":"Backend View Server Actions"},{"location":"internal/09_backend_view/10_actions/","title":"Actions","text":""},{"location":"internal/09_backend_view/10_actions/#server-action","title":"Server Action","text":"<p>In SYNER-CATALYST we can execute server actions, an intriguing feature using which the customers can meet their requirements. Let's discuss the functionality and how to use various parameters in server actions accordingly.</p> <p></p> <p>Server Actions are actions that can be executed automatically. These actions are added to the \u2018Action\u2019 contextual menu.</p> <p></p> <p>To create a server action create a data record in data.xml file as shown below:</p> Server Action in XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;odoo&gt;\n    &lt;data&gt;\n        &lt;record model=\"ir.actions.server\" id=\"action_working_on_something\"&gt;\n            &lt;field name=\"name\"&gt;ETL - Working On Something&lt;/field&gt;\n            &lt;field name=\"model_id\" ref=\"model_res_partner\"/&gt;\n            &lt;field name=\"binding_model_id\" ref=\"model_res_partner\"/&gt;\n            &lt;field name=\"binding_view_types\"&gt;list&lt;/field&gt;\n            &lt;field name=\"state\"&gt;code&lt;/field&gt;\n            &lt;field name=\"code\"&gt;model.python_method()\n            &lt;/field&gt;\n        &lt;/record&gt;\n    &lt;/data&gt;\n&lt;/odoo&gt;\n</code></pre> <ul> <li> <p>binding_model_id - Model linked to the action.</p> </li> <li> <p>name - Name of the server action.</p> </li> <li> <p>state - The field name \u2018state\u2019 specifies the type of server action.</p> </li> </ul> <p>In the above example, we are going to call the model method - python_method()</p> <p>Note</p> <p>We can also add server actions easily via the user interface. In order to create a server action activate the developer mode, go to Settings \u2192 Technical \u2192Server Actions.</p>"},{"location":"internal/20_api_integration/","title":"Backend View","text":"Backend View REST API"},{"location":"internal/20_api_integration/10_base_rest/","title":"REST API","text":""},{"location":"internal/20_api_integration/10_base_rest/#base-rest","title":"Base REST","text":"<p>This addon provides the basis to develop high level REST APIs for Odoo.</p> <p>As Odoo becomes one of the central pieces of enterprise IT systems, it often becomes necessary to set up specialized service interfaces, so existing systems can interact with Odoo.</p> <p>While the XML-RPC interface of Odoo comes handy in such situations, it requires a deep understanding of Odoo\u2019s internal data model. When used extensively, it creates a strong coupling between Odoo internals and client systems, therefore increasing maintenance costs.</p> <p>Once developed, an OpenApi documentation is generated from the source code and available via a Swagger UI served by your odoo server at https://my_odoo_server/api-docs.</p>"},{"location":"internal/20_api_integration/10_base_rest/#installation","title":"Installation","text":"<p>Need to install base_rest, base_rest_datamodel, data_model modules  Need to have the following python libraries - </p> <p>Note</p> <p>apispec, cachetools, cerberus, jsondiff, marshmallow, marshmallow_objects, pyquerystring, parse-accept-language</p>"},{"location":"internal/20_api_integration/10_base_rest/#configuration","title":"Configuration","text":"<p>If an error occurs when calling a method of a service (ie missing parameter, ..) the system returns only a general description of the problem without details. This is done on purpose to ensure maximum opacity on implementation details and therefore lower security issue.  This restriction can be problematic when the services are accessed by an external system in development. To know the details of an error it is indeed necessary to have access to the log of the server. It is not always possible to provide this kind of access. That's why you can configure the server to run these services in development mode.  To run the REST API in development mode you must add a new section '[base_rest]' with the option 'dev_mode=True' in the server config file.</p> <p>Note</p> <p>[base_rest] dev_mode=True</p> <p>When the REST API runs in development mode, the original description and a stack trace is returned in case of error. Be careful to not use this mode in production.</p>"},{"location":"internal/99_migration/","title":"Migration Guide (OpenUpgrade)","text":"Migration Guide Migration Actions Frequently Asked Questions"},{"location":"internal/99_migration/10_actions/","title":"Migrate from 2.0 to 2.5","text":""},{"location":"internal/99_migration/10_actions/#openupgrade-from-oca","title":"OpenUpgrade from OCA","text":"<p>Tools to upgrade Odoo instances from a major version to another This OCA project aims to provide an Open Source upgrade path for Odoo from one major Odoo version to the next one.</p> <p></p> <p>As SYNER-CATALYST is based on Odoo framework, table below shows the matching of Odoo version of SYNER-CATALYST releases.</p> <p>SYNER-CATALYST and Odoo version</p> SYNER-CATALYST Odoo Community 2.0 11.0 2.5 12.0 3.0 13.0 3.3 14.0 3.6 15.0 4.0 16.0"},{"location":"internal/99_migration/10_actions/#introduction","title":"Introduction","text":"<p>Odoo is an open source business application suite and development platform. This project, OpenUpgrade, aims to provide an Open Source upgrade path for Odoo. This is a community initiative, as the open source version of Odoo does not support migrations from one major release to another. Instead, migrations are part of a support package sold by Odoo SA. Note that the name of the project refers to the old name of Odoo, OpenERP.</p> <p>The project is hosted as two separate GitHub projects</p> <ul> <li>https://github.com/OCA/openupgrade<ul> <li>The branches in the first project contain the framework, as well as the database analysis and the migration scripts.</li> </ul> </li> <li>https://github.com/OCA/openupgradelib<ul> <li>The second project contains a library with helper functions. It can be used in the migration of any Odoo module.</li> </ul> </li> </ul> <p>Changes in OpenUpgrade for PW 3.3</p> <p>Before Odoo 14.0, the branches in https://github.com/OCA/openupgrade contain copies (or forks in Git terminology) of the Odoo main project, but with extra commits that include the framework, and the analysis and the migration scripts for each module.</p>"},{"location":"internal/99_migration/10_actions/#migrating-your-database","title":"Migrating your database","text":"<p>Check out the code manually and upgrade your database by calling odoo-bin, (or openerp-server) directly. You will want to do this when you are working on developing migration scripts for uncovered modules.</p>"},{"location":"internal/99_migration/10_actions/#get-the-code","title":"Get the code","text":""},{"location":"internal/99_migration/10_actions/#openupgrade","title":"OpenUpgrade","text":"<p>SYNER-CATALYST 3.3</p> <p>Make the openupgrade_framework and the openupgrade_scripts modules available in the addons path in the Odoo instance of the new version.</p> <p>Or, for older versions: check out the OpenUpgrade source code from Github for the branches you need. Each branch migrates to its version from the previous version, so branch 13.0 migrates from 12.0 to 13.0. If you are migrating across multiple versions, you need to run each version of OpenUpgrade in order. Skipping versions is not supported.</p> <p></p> <p>The OpenUpgrade repository includes both openupgrade_framework and openupgrade_scripts:</p> <p>https://github.com/OCA/openupgrade</p>"},{"location":"internal/99_migration/10_actions/#openupgradelib","title":"openupgradelib","text":"<p>When installing the openupgradelib make sure you check out the latest version from github to get the latest updates and fixes:</p> <pre><code>pip install git+https://github.com/OCA/openupgradelib.git@master#egg=openupgradelib\n</code></pre>"},{"location":"internal/99_migration/10_actions/#check-migration-scripts-for-installed-modules","title":"Check migration scripts for installed modules","text":"<p>Check if there are migration scripts provided for the set of modules that are installed in your Odoo database. If there are modules for which no migration scripts have been developed yet, your migration may fail or the integrity of your database may be lacking. Check the module coverage in this documentation under Module coverage and refer to the Migration script development documentation to add the missing migration scripts.</p> <p>The simplest way to do this by running the following command:  <pre><code>./odoo-bin -c pw.conf -d [database] -u all\n</code></pre></p>"},{"location":"internal/99_migration/10_actions/#remove-modules-not-available","title":"Remove modules not available","text":"<p>You may need to remove those modules, which are obselete in the next major version</p> <ul> <li>backend theme ( pw_backend_theme )</li> <li>OCA web_responsive module</li> <li>Flectra converted modules</li> <li>website and related modules</li> </ul>"},{"location":"internal/99_migration/10_actions/#clean-up-database","title":"Clean up database","text":"<p>May need to install the following module for database cleanup</p> <p>https://apps.odoo.com/apps/modules/11.0/database_cleanup/</p>"},{"location":"internal/99_migration/10_actions/#oca-and-syc-modules","title":"OCA and SYC modules","text":"<p>Please ensure all the addons for the database are located in the addons path ( PW_ADDONS.2.5 )</p> <p>If the module is not available at the higher version, you need to remove the modules or you need to write your own migration scripts for the module.</p>"},{"location":"internal/99_migration/10_actions/#make-a-copy-of-the-database","title":"Make a copy of the database","text":"<p>Decide which database you are going to upgrade. You absolutely must make a backup of your live database before you start this process!</p>"},{"location":"internal/99_migration/10_actions/#adjust-the-configuration-for-odoo-and-openupgrade","title":"Adjust the configuration for Odoo and OpenUpgrade","text":"<p>Edit the configuration files and command line parameters to point to the database you are going to upgrade. The recommended command line parameters are the --update all --stop-after-init --load=base,web,openupgrade_framework flags.</p> <p></p> <p>For versions earlier than 14.0 that are running the OpenUpgrade fork rather than Odoo itself, you do not pass the load parameter.</p>"},{"location":"internal/99_migration/10_actions/#configuration-options","title":"Configuration options","text":"<p>When migrating across several versions of Odoo, setting the target version as an environment variable allows OpenUpgrade to skip methods that are called in every version but really only need to run in the target version. Make the target version available to OpenUpgrade with:</p> <p>export OPENUPGRADE_TARGET_VERSION=13.0 (when migrating up to 13.0)</p>"},{"location":"internal/99_migration/10_actions/#obsolete-options-in-the-odoo-configuration-file","title":"Obsolete options in the Odoo configuration file","text":"<p>Versions of OpenUpgrade earlier than 14.0 allow for the following configuration options. Add these options to a separate stanza in the server configuration file under a header [openupgrade]</p> <ul> <li> <p>autoinstall - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value (and their dependencies) are selected for installation as well.</p> </li> <li> <p>force_deps - A dictionary with module name keys and lists of module names as values. If a key module is installed on your database, the modules from the value will be treated as a module dependency. With this directive, you can manipulate the order in which the modules are migrated. If the modules from the value are not already installed on your database, they will be selected for installation (as will their dependencies). Be careful not to introduce a circular dependency using this directive.</p> </li> </ul>"},{"location":"internal/99_migration/10_actions/#run-the-upgrade-fix-data-and-repeat","title":"Run the upgrade, fix data and repeat\u2026","text":"<p>Run the upgrade and check for errors. You will probably learn a lot about your data and have to do some manual clean up before and after the upgrade. Expect to repeat the process several times as you encounter errors, clean up your data, and try again. If necessary, ask for help or report bugs on Github.</p>"},{"location":"internal/99_migration/10_actions/#write-the-missing-migration-scripts","title":"Write the missing migration scripts","text":"<p>At this stage, if some of your modules don\u2019t have yet migration scripts, you might need to add them yourself. Read more about the development of migrations scripts in Migration script development</p>"},{"location":"internal/99_migration/15_faq/","title":"Migration Issues to 2.5","text":""},{"location":"internal/99_migration/15_faq/#database","title":"Database","text":""},{"location":"internal/99_migration/15_faq/#table-base_module_uninstall","title":"Table : base_module_uninstall","text":"<p>Error Message</p> <p>psycopg2.errors.NotNullViolation: null value in column \"module_id\" of relation \"base_module_uninstall\" violates not-null constraint</p> <p>Solution</p> <ul> <li>Use database tool ( pgadmin or DBeave), go to table \"base_module_uninstall\", select Tool then Truncate</li> <li>Click Next Select Restart Identiy and Cascade</li> </ul>"}]}